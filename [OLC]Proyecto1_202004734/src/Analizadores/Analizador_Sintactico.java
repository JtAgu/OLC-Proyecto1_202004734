
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\007\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\006\004\000\002\004\010" +
    "\000\002\010\003\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\023\004\001\002\000\012\017\013\024" +
    "\012\025\011\026\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002\000" +
    "\006\007\072\012\071\001\002\000\004\025\070\001\002" +
    "\000\004\002\ufffb\001\002\000\004\007\024\001\002\000" +
    "\012\017\013\024\012\025\011\026\010\001\002\000\012" +
    "\017\013\024\012\025\011\026\010\001\002\000\012\017" +
    "\013\024\012\025\011\026\010\001\002\000\012\017\013" +
    "\024\012\025\011\026\010\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffe\001\002\000\004\026\025\001\002\000" +
    "\004\012\026\001\002\000\040\004\043\005\033\006\035" +
    "\007\030\011\047\013\040\014\044\016\042\021\031\022" +
    "\046\023\041\024\037\025\034\026\032\032\036\001\002" +
    "\000\004\010\067\001\002\000\042\004\043\005\033\006" +
    "\035\007\030\010\uffd2\011\047\013\040\014\044\016\042" +
    "\021\031\022\046\023\041\024\037\025\034\026\032\032" +
    "\036\001\002\000\042\004\043\005\033\006\035\007\030" +
    "\010\uffdc\011\047\013\040\014\044\016\042\021\031\022" +
    "\046\023\041\024\037\025\034\026\032\032\036\001\002" +
    "\000\042\004\043\005\033\006\035\007\030\010\uffeb\011" +
    "\047\013\040\014\044\016\042\021\031\022\046\023\041" +
    "\024\037\025\034\026\032\032\036\001\002\000\040\004" +
    "\043\005\033\006\035\007\030\011\047\013\040\014\044" +
    "\016\042\021\031\022\046\023\041\024\037\025\034\026" +
    "\032\032\036\001\002\000\042\004\043\005\033\006\035" +
    "\007\030\010\uffda\011\047\013\040\014\044\016\042\021" +
    "\031\022\046\023\041\024\037\025\034\026\032\032\036" +
    "\001\002\000\042\004\043\005\033\006\035\007\030\010" +
    "\uffe0\011\047\013\040\014\044\016\042\021\031\022\046" +
    "\023\041\024\037\025\034\026\032\032\036\001\002\000" +
    "\042\004\043\005\033\006\035\007\030\010\uffe9\011\047" +
    "\013\040\014\044\016\042\021\031\022\046\023\041\024" +
    "\037\025\034\026\032\032\036\001\002\000\042\004\043" +
    "\005\033\006\035\007\030\010\uffd6\011\047\013\040\014" +
    "\044\016\042\021\031\022\046\023\041\024\037\025\034" +
    "\026\032\032\036\001\002\000\042\004\043\005\033\006" +
    "\035\007\030\010\uffe4\011\047\013\040\014\044\016\042" +
    "\021\031\022\046\023\041\024\037\025\034\026\032\032" +
    "\036\001\002\000\042\004\043\005\033\006\035\007\030" +
    "\010\uffd8\011\047\013\040\014\044\016\042\021\031\022" +
    "\046\023\041\024\037\025\034\026\032\032\036\001\002" +
    "\000\042\004\043\005\033\006\035\007\030\010\uffd4\011" +
    "\047\013\040\014\044\016\042\021\031\022\046\023\041" +
    "\024\037\025\034\026\032\032\036\001\002\000\042\004" +
    "\043\005\033\006\035\007\030\010\uffed\011\047\013\040" +
    "\014\044\016\042\021\031\022\046\023\041\024\037\025" +
    "\034\026\032\032\036\001\002\000\042\004\043\005\033" +
    "\006\035\007\030\010\uffe2\011\047\013\040\014\044\016" +
    "\042\021\031\022\046\023\041\024\037\025\034\026\032" +
    "\032\036\001\002\000\004\010\uffee\001\002\000\042\004" +
    "\043\005\033\006\035\007\030\010\uffde\011\047\013\040" +
    "\014\044\016\042\021\031\022\046\023\041\024\037\025" +
    "\034\026\032\032\036\001\002\000\040\004\043\005\033" +
    "\006\035\007\030\011\047\013\040\014\044\016\042\021" +
    "\031\022\046\023\041\024\037\025\034\026\032\032\036" +
    "\001\002\000\004\010\uffe6\001\002\000\004\010\uffdf\001" +
    "\002\000\004\010\uffe3\001\002\000\004\010\uffec\001\002" +
    "\000\004\010\uffd5\001\002\000\004\010\uffd9\001\002\000" +
    "\004\010\uffe5\001\002\000\004\010\uffd7\001\002\000\004" +
    "\010\uffe8\001\002\000\004\010\uffe1\001\002\000\004\010" +
    "\uffdb\001\002\000\004\010\uffe7\001\002\000\004\010\uffea" +
    "\001\002\000\004\010\uffdd\001\002\000\004\010\uffd3\001" +
    "\002\000\012\017\uffef\024\uffef\025\uffef\026\uffef\001\002" +
    "\000\012\017\ufff0\024\ufff0\025\ufff0\026\ufff0\001\002\000" +
    "\020\006\102\013\077\014\101\015\075\016\104\023\076" +
    "\027\103\001\002\000\004\027\073\001\002\000\004\010" +
    "\074\001\002\000\012\017\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\001\002\000\020\006\102\013\077\014\101\015\075\016" +
    "\104\023\076\027\103\001\002\000\004\026\113\001\002" +
    "\000\020\006\102\013\077\014\101\015\075\016\104\023" +
    "\076\027\103\001\002\000\004\010\111\001\002\000\020" +
    "\006\102\013\077\014\101\015\075\016\104\023\076\027" +
    "\103\001\002\000\020\006\102\013\077\014\101\015\075" +
    "\016\104\023\076\027\103\001\002\000\022\006\102\010" +
    "\ufff6\013\077\014\101\015\075\016\104\023\076\027\103" +
    "\001\002\000\020\006\102\013\077\014\101\015\075\016" +
    "\104\023\076\027\103\001\002\000\004\010\ufff3\001\002" +
    "\000\004\010\ufff7\001\002\000\004\010\ufff5\001\002\000" +
    "\004\010\ufff1\001\002\000\012\017\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\001\002\000\004\010\ufff2\001\002\000\004\024" +
    "\114\001\002\000\022\006\102\010\ufff8\013\077\014\101" +
    "\015\075\016\104\023\076\027\103\001\002\000\004\010" +
    "\ufff9\001\002\000\004\010\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\002\004\001\001\000\014\003\006\004" +
    "\015\005\013\006\014\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\022\004\015\005\013\006\014\007\016\001\001\000" +
    "\014\003\021\004\015\005\013\006\014\007\016\001\001" +
    "\000\014\003\020\004\015\005\013\006\014\007\016\001" +
    "\001\000\014\003\017\004\015\005\013\006\014\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\026\011\044\001\001\000\002\001\001\000" +
    "\004\011\065\001\001\000\004\011\064\001\001\000\004" +
    "\011\063\001\001\000\004\011\062\001\001\000\004\011" +
    "\061\001\001\000\004\011\060\001\001\000\004\011\057" +
    "\001\001\000\004\011\056\001\001\000\004\011\055\001" +
    "\001\000\004\011\054\001\001\000\004\011\053\001\001" +
    "\000\004\011\052\001\001\000\004\011\051\001\001\000" +
    "\002\001\001\000\004\011\050\001\001\000\004\011\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\115\001\001\000\002\001\001\000\004\012\111\001\001" +
    "\000\002\001\001\000\004\012\107\001\001\000\004\012" +
    "\106\001\001\000\004\012\105\001\001\000\004\012\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\114\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<Token> CONJUNTOS = new LinkedList<Token>(); 
    public static LinkedList<Token> EXPRESIONES = new LinkedList<Token>(); 
    public static LinkedList<Token> PRUEBAS = new LinkedList<Token>(); 
    public static LinkedList<TError> errores = new LinkedList<TError>(); 

    public static String Conjunto="";
    public static String tipo="Lista";


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {
  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LlaveA INSTRUCCION 
            {
              Object RESULT =null;
		System.out.println("FIN DE ANALISIS");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INS_CONJ INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INS_EXP INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INS_SEPARACION INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INS_CREACION INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= LlaveC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INS_CREACION ::= id flecha LISTA_CREACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INS_CREACION",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_CREACION ::= LlaveA id LlaveC LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_CREACION ::= LlaveA id LlaveC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_CREACION ::= Cadena LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_CREACION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_CREACION ::= Punto LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_CREACION ::= Mas LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_CREACION ::= Or LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA_CREACION ::= InterrogacionC LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_CREACION ::= Asterisco LISTA_CREACION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CREACION",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INS_SEPARACION ::= PorCiento PorCiento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INS_SEPARACION",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INS_CONJ ::= CONJ DosPuntos id flecha CONJUNTOS PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Token tmp = new Token("id",a.toString());
        CONJUNTOS.add(tmp);
        tmp = new Token("VALORES",tipo+","+Conjunto);
        CONJUNTOS.add(tmp);
        Conjunto="";
        tipo="Lista";
        tmp = new Token("PuntoComa",b.toString());
        CONJUNTOS.add(tmp);
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INS_CONJ",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONJUNTOS ::= VAL_RANGO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAL_RANGO ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VAL_RANGO ::= numero VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAL_RANGO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL_RANGO ::= id VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAL_RANGO ::= ASSCI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAL_RANGO ::= ASSCI VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();

    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAL_RANGO ::= coma VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VAL_RANGO ::= guion VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
        tipo="Rango";
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VAL_RANGO ::= InterrogacionC VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VAL_RANGO ::= InterrogacionC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VAL_RANGO ::= Asterisco VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VAL_RANGO ::= Asterisco 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL_RANGO ::= Punto VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAL_RANGO ::= Punto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAL_RANGO ::= MenorQue VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VAL_RANGO ::= MenorQue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VAL_RANGO ::= MayorQue VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
        
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VAL_RANGO ::= MayorQue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();

    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VAL_RANGO ::= PorCiento VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();

    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VAL_RANGO ::= PorCiento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VAL_RANGO ::= LlaveA VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VAL_RANGO ::= LlaveA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();

    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAL_RANGO ::= LlaveC VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAL_RANGO ::= LlaveC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAL_RANGO ::= Or VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAL_RANGO ::= Or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAL_RANGO ::= DosPuntos VAL_RANGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAL_RANGO ::= DosPuntos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		
        Conjunto+=a.toString();
    
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_RANGO",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INS_EXP ::= id DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 
                Token tmp = new Token("id",a.toString());
                PRUEBAS.add(tmp);
                tmp = new Token("Cadena",b.toString());
                PRUEBAS.add(tmp);
                tmp = new Token("PuntoComa",c.toString());
                PRUEBAS.add(tmp);
                                                
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INS_EXP",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
